const fs = require('fs');
const path = require('path');

const filePath = path.join('src','components','shared','WaitlistModal.tsx');
let text = fs.readFileSync(filePath,'utf8');
const constantsPattern = "const OPEN_EVENT = 'waitlist:open';\r\nconst OPENED_EVENT = 'waitlist:opened';\r\nconst CLOSED_EVENT = 'waitlist:closed';";
if (!text.includes('HUBSPOT_MEETING_URL')) {
  const constantsReplacement = [
    "const OPEN_EVENT = 'waitlist:open';",
    "const OPENED_EVENT = 'waitlist:opened';",
    "const CLOSED_EVENT = 'waitlist:closed';",
    '',
    "const HUBSPOT_MEETING_URL = 'https://meetings-eu1.hubspot.com/emmanuel-schmidt-le-roi/prospect-formulaire-website?embed=true';",
    "const HUBSPOT_MEETINGS_SCRIPT_SRC = 'https://static.hsappstatic.net/MeetingsEmbed/ex/MeetingsEmbedCode.js';"
  ].join('\r\n');
  text = text.replace(constantsPattern, constantsReplacement);
  const helperLines = [
    'type HubspotMeetingsEmbedProps = {',
    '  url: string;',
    '  title: string;',
    '  active: boolean;',
    "  variant?: 'mobile' | 'desktop';",
    '  className?: string;',
    '};',
    '',
    'declare global {',
    '  interface Window {',
    '    hbspt?: {',
    '      meetings?: {',
    '        create?: (selector: string) => void;',
    '      };',
    '    };',
    '  }',
    '}',
    '',
    "function HubspotMeetingsEmbed({ url, title, active, variant = 'desktop', className }: HubspotMeetingsEmbedProps) {",
    '  const containerRef = useRef<HTMLDivElement | null>(null);',
    "  const containerId = useMemo(() => 'hs-meetings-' + Math.random().toString(36).slice(2, 10), []);",
    '  const containerClassName = useMemo(() => {',
    "    const classes = ['meetings-iframe-container'];",
    '    if (className) classes.push(className);',
    "    if (variant === 'mobile') classes.push('mobile-hubspot');",
    "    return classes.join(' ');",
    '  }, [className, variant]);',
    '',
    '  useEffect(() => {',
    '    if (!containerRef.current) return;',
    "    containerRef.current.setAttribute('data-src', url);",
    "    containerRef.current.setAttribute('data-title', title);",
    '  }, [url, title]);',
    '',
    '  useEffect(() => {',
    '    if (!active || !containerRef.current) return;',
    '',
    '    const container = containerRef.current;',
    "    container.style.minHeight = '0px';",
    "    container.style.height = '100%';",
    "    container.style.width = '100%';",
    "    container.style.overflow = 'hidden';",
    '',
    '    const applyResponsiveStyles = () => {',
    "      const iframe = container.querySelector('iframe');",
    '      if (!iframe) return;',
    "      const isMobile = variant === 'mobile';",
    '      const scale = isMobile ? 0.88 : 1;',
    '      if (isMobile) {',
    "        container.style.display = 'flex';",
    "        container.style.justifyContent = 'center';",
    "        container.style.alignItems = 'flex-start';",
    "        container.style.paddingTop = '8px';",
    '      } else {',
    "        container.style.removeProperty('display');",
    "        container.style.removeProperty('justify-content');",
    "        container.style.removeProperty('align-items');",
    "        container.style.removeProperty('padding-top');",
    '      }',
    "      iframe.style.width = '100%';",
    "      iframe.style.minHeight = '0px';",
    "      iframe.style.maxWidth = '100%';",
    "      iframe.style.border = '0';",
    "      iframe.style.transformOrigin = 'top center';",
    "      iframe.style.transform = scale === 1 ? 'none' : 'scale(' + scale + ')';",
    "      iframe.style.margin = scale === 1 ? '0' : '0 auto';",
    "      iframe.style.height = scale === 1 ? '100%' : (1 / scale * 100) + '%';",
    "      iframe.style.maxHeight = '100%';",
    '    };',
    '',
    '    const renderEmbed = () => {',
    "      if (container.querySelector('iframe')) {",
    '        applyResponsiveStyles();',
    '        return;',
    '      }',
    '      try {',
    "        window.hbspt?.meetings?.create?.('#' + containerId);",
    '        window.setTimeout(applyResponsiveStyles, 90);',
    '      } catch (error) {',
    "        console.error('Unable to render HubSpot meetings embed', error);",
    '      }',
    '    };',
    '',
    '    const observer = new MutationObserver(applyResponsiveStyles);',
    '    observer.observe(container, { childList: true, subtree: true });',
    '',
    '    let cleanupScriptListener;',
    "    const existingScript = document.querySelector('script[src=\"' + HUBSPOT_MEETINGS_SCRIPT_SRC + '\"]');",
    '',
    '    if (!existingScript) {',
    "      const script = document.createElement('script');",
    "      script.src = HUBSPOT_MEETINGS_SCRIPT_SRC;",
    '      script.async = true;',
    '      script.defer = true;',
    '      const onLoad = () => {',
    "        script.dataset.loaded = 'true';",
    '        renderEmbed();',
    '      };',
    "      script.addEventListener('load', onLoad);",
    "      document.body.appendChild(script);",
    '      cleanupScriptListener = () => {',
    "        script.removeEventListener('load', onLoad);",
    '      };',
    "    } else if (existingScript.dataset.loaded === 'true' || window.hbspt?.meetings?.create) {",
    '      renderEmbed();',
    '    } else {',
    '      const onLoad = () => {',
    "        existingScript.dataset.loaded = 'true';",
    '        renderEmbed();',
    '      };',
    "      existingScript.addEventListener('load', onLoad);",
    '      cleanupScriptListener = () => {',
    "        existingScript.removeEventListener('load', onLoad);",
    '      };',
    '    }',
    '',
    '    applyResponsiveStyles();',
    '',
    '    return () => {',
    '      observer.disconnect();',
    '      if (cleanupScriptListener) cleanupScriptListener();',
    '    };',
    "  }, [active, containerId, variant, url, title]);",
    '',
    '  useEffect(() => {',
    '    return () => {',
    '      if (containerRef.current) {',
    "        containerRef.current.innerHTML = '';",
    '      }',
    '    };',
    '  }, []);',
    '',
    '  return <div id={containerId} ref={containerRef} className={containerClassName} data-src={url} data-title={title} />;',
    '}',
    ''
  ].join('\r\n');
  text = text.replace('type StepState = {', helperLines + '\r\ntype StepState = {');
}
if (!text.includes('function CloseIcon')) {
  text = text.replace(
    "function Check() {\r\n  return (\r\n    <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M20 6L9 17l-5-5\"/></svg>\r\n  );\r\n}\r\n\r\n",
    "function Check() {\r\n  return (\r\n    <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M20 6L9 17l-5-5\"/></svg>\r\n  );\r\n}\r\nfunction CloseIcon() {\r\n  return (\r\n    <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"/><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"/></svg>\r\n  );\r\n}\r\n\r\n"
  );
}
fs.writeFileSync(filePath,text,'utf8');
