#!/usr/bin/env npx tsx

/**
 * Script pour v√©rifier la s√©curit√© de la base de donn√©es Supabase
 * V√©rifie les politiques RLS, les contraintes et les permissions
 */

const url = process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL;
const key = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!url || !key) {
  console.log('‚ùå Variables d\'environnement manquantes !');
  console.log('Configurez SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

async function checkDatabaseSecurity() {
  console.log('üîí V√©rification de la s√©curit√© de la base de donn√©es');
  console.log('====================================================');

  try {
    // 1. V√©rifier si la table leads_candidature existe
    console.log('\nüìã 1. V√©rification de la table leads_candidature...');
    const tableResponse = await fetch(`${url}/rest/v1/leads_candidature?select=count`, {
      headers: {
        apikey: key,
        Authorization: `Bearer ${key}`,
        'Content-Type': 'application/json',
      },
    });

    if (tableResponse.ok) {
      console.log('‚úÖ Table leads_candidature existe');
      const data = await tableResponse.json();
      console.log(`üìä Nombre d'enregistrements: ${data.length}`);
    } else {
      console.log(`‚ùå Table leads_candidature non trouv√©e: ${tableResponse.status}`);
      const errorText = await tableResponse.text();
      console.log(`D√©tails: ${errorText}`);
      return;
    }

    // 2. V√©rifier les politiques RLS
    console.log('\nüõ°Ô∏è 2. V√©rification des politiques RLS...');
    const policiesResponse = await fetch(`${url}/rest/v1/pg_policies?tablename=eq.leads_candidature&select=*`, {
      headers: {
        apikey: key,
        Authorization: `Bearer ${key}`,
        'Content-Type': 'application/json',
      },
    });

    if (policiesResponse.ok) {
      const policies = await policiesResponse.json();
      if (policies.length > 0) {
        console.log('‚úÖ Politiques RLS configur√©es:');
        policies.forEach((policy: any) => {
          console.log(`   - ${policy.policyname}: ${policy.roles?.join(', ') || 'all'} (${policy.cmd})`);
        });
      } else {
        console.log('‚ö†Ô∏è Aucune politique RLS trouv√©e - VULN√âRABILIT√â POTENTIELLE !');
      }
    } else {
      console.log(`‚ùå Impossible de v√©rifier les politiques: ${policiesResponse.status}`);
    }

    // 3. V√©rifier si RLS est activ√©
    console.log('\nüîê 3. V√©rification de l\'activation RLS...');
    const rlsResponse = await fetch(`${url}/rest/v1/pg_tables?tablename=eq.leads_candidature&select=rowsecurity`, {
      headers: {
        apikey: key,
        Authorization: `Bearer ${key}`,
        'Content-Type': 'application/json',
      },
    });

    if (rlsResponse.ok) {
      const tables = await rlsResponse.json();
      if (tables.length > 0) {
        const rlsEnabled = tables[0].rowsecurity;
        if (rlsEnabled) {
          console.log('‚úÖ Row Level Security (RLS) est activ√©');
        } else {
          console.log('‚ùå Row Level Security (RLS) est D√âSACTIV√â - VULN√âRABILIT√â MAJEURE !');
        }
      }
    } else {
      console.log(`‚ùå Impossible de v√©rifier RLS: ${rlsResponse.status}`);
    }

    // 4. Test d'acc√®s avec un token anonyme (devrait √©chouer)
    console.log('\nüß™ 4. Test de s√©curit√© avec token anonyme...');
    const anonResponse = await fetch(`${url}/rest/v1/leads_candidature?select=id&limit=1`, {
      headers: {
        apikey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'test-anon-key',
        Authorization: `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'test-anon-key'}`,
        'Content-Type': 'application/json',
      },
    });

    if (anonResponse.status === 401 || anonResponse.status === 403) {
      console.log('‚úÖ Acc√®s anonyme correctement bloqu√©');
    } else if (anonResponse.ok) {
      console.log('‚ùå VULN√âRABILIT√â: Acc√®s anonyme autoris√© !');
    } else {
      console.log(`‚ö†Ô∏è R√©ponse inattendue pour l'acc√®s anonyme: ${anonResponse.status}`);
    }

    // 5. V√©rifier les contraintes de validation
    console.log('\nüìè 5. V√©rification des contraintes de validation...');
    const constraintsResponse = await fetch(`${url}/rest/v1/pg_constraint?conrelid=(select oid from pg_class where relname='leads_candidature')&select=conname,consrc`, {
      headers: {
        apikey: key,
        Authorization: `Bearer ${key}`,
        'Content-Type': 'application/json',
      },
    });

    if (constraintsResponse.ok) {
      const constraints = await constraintsResponse.json();
      if (constraints.length > 0) {
        console.log('‚úÖ Contraintes de validation configur√©es:');
        constraints.forEach((constraint: any) => {
          console.log(`   - ${constraint.conname}`);
        });
      } else {
        console.log('‚ö†Ô∏è Aucune contrainte de validation trouv√©e');
      }
    }

    console.log('\nüéØ R√©sum√© de la s√©curit√©:');
    console.log('========================');
    console.log('‚úÖ Service Role: Acc√®s complet (normal)');
    console.log('‚úÖ API s√©curis√©e: Rate limits + PoW + CSRF');
    console.log('‚úÖ Variables d\'environnement: Configur√©es en production');
    
    if (policiesResponse.ok && (await policiesResponse.json()).length > 0) {
      console.log('‚úÖ RLS: Politiques configur√©es');
    } else {
      console.log('‚ö†Ô∏è RLS: V√©rifiez les politiques');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  }
}

checkDatabaseSecurity();
