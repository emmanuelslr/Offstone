#!/usr/bin/env npx tsx

/**
 * Script pour v√©rifier la configuration RLS actuelle
 * sur la table leads_candidature
 */

const url = process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL;
const key = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!url || !key) {
  console.log('‚ùå Variables d\'environnement manquantes !');
  console.log('Configurez SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

async function verifyCurrentRLS() {
  console.log('üîç V√©rification de la configuration RLS actuelle');
  console.log('================================================');

  try {
    // 1. V√©rifier si RLS est activ√©
    console.log('\nüîê 1. Statut RLS sur leads_candidature...');
    const rlsResponse = await fetch(`${url}/rest/v1/pg_tables?tablename=eq.leads_candidature&select=rowsecurity`, {
      headers: {
        apikey: key,
        Authorization: `Bearer ${key}`,
        'Content-Type': 'application/json',
      },
    });

    if (rlsResponse.ok) {
      const tables = await rlsResponse.json();
      if (tables.length > 0) {
        const rlsEnabled = tables[0].rowsecurity;
        if (rlsEnabled) {
          console.log('‚úÖ Row Level Security (RLS) est ACTIV√â');
        } else {
          console.log('‚ùå Row Level Security (RLS) est D√âSACTIV√â');
        }
      } else {
        console.log('‚ùå Table leads_candidature non trouv√©e');
        return;
      }
    }

    // 2. Lister toutes les politiques RLS
    console.log('\nüìã 2. Politiques RLS configur√©es...');
    const policiesResponse = await fetch(`${url}/rest/v1/pg_policies?tablename=eq.leads_candidature&select=*`, {
      headers: {
        apikey: key,
        Authorization: `Bearer ${key}`,
        'Content-Type': 'application/json',
      },
    });

    if (policiesResponse.ok) {
      const policies = await policiesResponse.json();
      if (policies.length > 0) {
        console.log(`‚úÖ ${policies.length} politique(s) RLS trouv√©e(s):`);
        policies.forEach((policy: any, index: number) => {
          console.log(`\n   Politique ${index + 1}: ${policy.policyname}`);
          console.log(`   - R√¥les: ${policy.roles?.join(', ') || 'all'}`);
          console.log(`   - Commandes: ${policy.cmd}`);
          console.log(`   - Permissive: ${policy.permissive ? 'Oui' : 'Non'}`);
          if (policy.qual) console.log(`   - Condition USING: ${policy.qual}`);
          if (policy.with_check) console.log(`   - Condition WITH CHECK: ${policy.with_check}`);
        });
      } else {
        console.log('‚ö†Ô∏è Aucune politique RLS trouv√©e');
      }
    }

    // 3. V√©rifier les contraintes de s√©curit√©
    console.log('\nüõ°Ô∏è 3. Contraintes de s√©curit√©...');
    const constraintsResponse = await fetch(`${url}/rest/v1/pg_constraint?conrelid=(select oid from pg_class where relname='leads_candidature')&select=conname,consrc`, {
      headers: {
        apikey: key,
        Authorization: `Bearer ${key}`,
        'Content-Type': 'application/json',
      },
    });

    if (constraintsResponse.ok) {
      const constraints = await constraintsResponse.json();
      if (constraints.length > 0) {
        console.log(`‚úÖ ${constraints.length} contrainte(s) trouv√©e(s):`);
        constraints.forEach((constraint: any) => {
          console.log(`   - ${constraint.conname}`);
        });
      } else {
        console.log('‚ö†Ô∏è Aucune contrainte de s√©curit√© trouv√©e');
      }
    }

    // 4. Test de s√©curit√© - acc√®s anonyme
    console.log('\nüß™ 4. Test de s√©curit√© - acc√®s anonyme...');
    const anonResponse = await fetch(`${url}/rest/v1/leads_candidature?select=id&limit=1`, {
      headers: {
        apikey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'test-anon-key',
        Authorization: `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'test-anon-key'}`,
        'Content-Type': 'application/json',
      },
    });

    if (anonResponse.status === 401 || anonResponse.status === 403) {
      console.log('‚úÖ Acc√®s anonyme correctement BLOQU√â');
    } else if (anonResponse.ok) {
      console.log('‚ùå VULN√âRABILIT√â: Acc√®s anonyme AUTORIS√â !');
    } else {
      console.log(`‚ö†Ô∏è R√©ponse inattendue: ${anonResponse.status}`);
    }

    // 5. Test de s√©curit√© - acc√®s authenticated
    console.log('\nüß™ 5. Test de s√©curit√© - acc√®s authenticated...');
    const authResponse = await fetch(`${url}/rest/v1/leads_candidature?select=id&limit=1`, {
      headers: {
        apikey: key,
        Authorization: `Bearer ${key}`,
        'Content-Type': 'application/json',
      },
    });

    if (authResponse.ok) {
      console.log('‚úÖ Acc√®s service_role autoris√© (normal)');
    } else {
      console.log(`‚ùå Probl√®me avec l'acc√®s service_role: ${authResponse.status}`);
    }

    // 6. R√©sum√© de s√©curit√©
    console.log('\nüéØ R√©sum√© de la s√©curit√©:');
    console.log('========================');
    
    if (rlsResponse.ok && (await rlsResponse.json())[0]?.rowsecurity) {
      console.log('‚úÖ RLS: Activ√©');
    } else {
      console.log('‚ùå RLS: D√©sactiv√© ou non configur√©');
    }
    
    if (policiesResponse.ok && (await policiesResponse.json()).length > 0) {
      console.log('‚úÖ Politiques: Configur√©es');
    } else {
      console.log('‚ùå Politiques: Manquantes');
    }
    
    if (anonResponse.status === 401 || anonResponse.status === 403) {
      console.log('‚úÖ Acc√®s anonyme: Bloqu√©');
    } else {
      console.log('‚ùå Acc√®s anonyme: Autoris√© (VULN√âRABLE)');
    }
    
    console.log('‚úÖ API: S√©curis√©e (CSRF + PoW + Rate Limits)');
    console.log('‚úÖ Service Role: Configur√©');

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  }
}

verifyCurrentRLS();
