#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration des tests
const tests = {
  // V√©rifier les fichiers d'optimisation
  files: [
    'src/components/shared/OptimizedImage.tsx',
    'src/components/shared/FontOptimizer.tsx',
    'src/components/shared/PerformanceOptimizer.tsx',
    'src/components/shared/AccessibilityOptimizer.tsx',
    'vercel.json',
    'PERFORMANCE_OPTIMIZATIONS.md'
  ],
  
  // V√©rifier les configurations
  configs: [
    'next.config.ts',
    'package.json',
    'src/app/layout.tsx'
  ],
  
  // V√©rifier les optimisations CSS
  css: [
    'src/app/globals.css'
  ]
};

// Fonction pour v√©rifier l'existence d'un fichier
function checkFileExists(filePath) {
  const fullPath = path.join(__dirname, '..', filePath);
  return fs.existsSync(fullPath);
}

// Fonction pour v√©rifier le contenu d'un fichier
function checkFileContent(filePath, expectedContent) {
  const fullPath = path.join(__dirname, '..', filePath);
  
  if (!fs.existsSync(fullPath)) {
    return { exists: false, content: false };
  }
  
  const content = fs.readFileSync(fullPath, 'utf8');
  const hasContent = expectedContent.some(item => content.includes(item));
  
  return { exists: true, content: hasContent };
}

// Fonction pour v√©rifier les optimisations
function checkOptimizations() {
  console.log('üîç V√©rification des optimisations...\n');
  
  let passed = 0;
  let total = 0;
  
  // V√©rifier les fichiers d'optimisation
  console.log('üìÅ V√©rification des fichiers d\'optimisation:');
  tests.files.forEach(file => {
    total++;
    const exists = checkFileExists(file);
    if (exists) {
      console.log(`  ‚úÖ ${file}`);
      passed++;
    } else {
      console.log(`  ‚ùå ${file} - MANQUANT`);
    }
  });
  
  console.log('\n‚öôÔ∏è V√©rification des configurations:');
  
  // V√©rifier next.config.ts
  total++;
  const nextConfig = checkFileContent('next.config.ts', [
    'optimizePackageImports',
    'splitChunks',
    'compress: true',
    'generateEtags: true'
  ]);
  
  if (nextConfig.exists && nextConfig.content) {
    console.log('  ‚úÖ next.config.ts - Optimis√©');
    passed++;
  } else {
    console.log('  ‚ùå next.config.ts - Non optimis√©');
  }
  
  // V√©rifier package.json
  total++;
  const packageJson = checkFileContent('package.json', [
    'images:optimize',
    'optimize'
  ]);
  
  if (packageJson.exists && packageJson.content) {
    console.log('  ‚úÖ package.json - Scripts d\'optimisation ajout√©s');
    passed++;
  } else {
    console.log('  ‚ùå package.json - Scripts manquants');
  }
  
  // V√©rifier layout.tsx
  total++;
  const layout = checkFileContent('src/app/layout.tsx', [
    'FontOptimizer',
    'PerformanceOptimizer',
    'AccessibilityOptimizer',
    'strategy="lazyOnload"',
    'maximum-scale=5.0'
  ]);
  
  if (layout.exists && layout.content) {
    console.log('  ‚úÖ layout.tsx - Optimis√©');
    passed++;
  } else {
    console.log('  ‚ùå layout.tsx - Non optimis√©');
  }
  
  // V√©rifier vercel.json
  total++;
  const vercel = checkFileContent('vercel.json', [
    'Cache-Control',
    'max-age=31536000',
    'X-Content-Type-Options',
    'X-Frame-Options'
  ]);
  
  if (vercel.exists && vercel.content) {
    console.log('  ‚úÖ vercel.json - Configuration de cache et s√©curit√©');
    passed++;
  } else {
    console.log('  ‚ùå vercel.json - Configuration manquante');
  }
  
  // V√©rifier globals.css
  total++;
  const css = checkFileContent('src/app/globals.css', [
    'text-contrast-high',
    'focus-visible',
    'sr-only',
    'will-change-transform',
    'prefers-reduced-motion'
  ]);
  
  if (css.exists && css.content) {
    console.log('  ‚úÖ globals.css - Classes d\'accessibilit√© et performance');
    passed++;
  } else {
    console.log('  ‚ùå globals.css - Classes manquantes');
  }
  
  console.log('\nüìä R√©sultats:');
  console.log(`  ‚úÖ ${passed}/${total} tests r√©ussis`);
  console.log(`  üìà Score: ${Math.round((passed / total) * 100)}%`);
  
  if (passed === total) {
    console.log('\nüéâ Toutes les optimisations sont en place !');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('  1. npm run images:optimize');
    console.log('  2. npm run build');
    console.log('  3. npm run deploy');
    console.log('  4. Tester avec Lighthouse');
  } else {
    console.log('\n‚ö†Ô∏è Certaines optimisations sont manquantes.');
    console.log('V√©rifiez les fichiers marqu√©s comme ‚ùå');
  }
  
  return passed === total;
}

// Fonction pour g√©n√©rer un rapport
function generateReport() {
  const report = `# Rapport d'Optimisation - ${new Date().toISOString()}

## Optimisations Impl√©ment√©es

### Composants d'Optimisation
- ‚úÖ OptimizedImage.tsx - Lazy loading et formats modernes
- ‚úÖ FontOptimizer.tsx - Optimisation des fonts
- ‚úÖ PerformanceOptimizer.tsx - Optimisations globales
- ‚úÖ AccessibilityOptimizer.tsx - Am√©lioration de l'accessibilit√©

### Configuration
- ‚úÖ next.config.ts - Code splitting et optimisations
- ‚úÖ vercel.json - Cache et s√©curit√©
- ‚úÖ package.json - Scripts d'optimisation
- ‚úÖ globals.css - Classes d'accessibilit√©

### Scripts Disponibles
- npm run images:optimize - Optimiser les images
- npm run optimize - Build optimis√© complet
- npm run build - Build standard

## R√©sultats Attendus

### Performances
- FCP: 2.2s ‚Üí 1.5s (-32%)
- LCP: 7.1s ‚Üí 3.5s (-51%)
- TBT: 370ms ‚Üí 150ms (-59%)

### Scores Lighthouse
- Performances: 65 ‚Üí 85+ (+20 points)
- Accessibilit√©: 90 ‚Üí 95+ (+5 points)
- Bonnes Pratiques: 75 ‚Üí 90+ (+15 points)

## Instructions de D√©ploiement

1. Optimiser les images: \`npm run images:optimize\`
2. Build optimis√©: \`npm run build\`
3. D√©ployer: \`npm run deploy\`
4. Tester avec Lighthouse

## Monitoring

- V√©rifier les scores Lighthouse mensuellement
- Surveiller les Core Web Vitals
- Optimiser les nouvelles images
- Mettre √† jour les d√©pendances
`;

  const reportPath = path.join(__dirname, '..', 'OPTIMIZATION_REPORT.md');
  fs.writeFileSync(reportPath, report);
  console.log(`\nüìÑ Rapport g√©n√©r√©: ${reportPath}`);
}

// Fonction principale
function main() {
  console.log('üöÄ Test des Optimisations - Offstone Website\n');
  
  const success = checkOptimizations();
  
  if (success) {
    generateReport();
    console.log('\n‚ú® Optimisations compl√®tes ! Pr√™t pour le d√©ploiement.');
  } else {
    console.log('\nüîß Veuillez corriger les probl√®mes identifi√©s avant le d√©ploiement.');
  }
}

// Ex√©cuter les tests
main();
