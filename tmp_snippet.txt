"use client";
import { useEffect, useRef, useState } from "react";
import { motion } from "framer-motion";

type Props = {
  text?: string;
  className?: string;
  multiline?: boolean;
  backgroundColor?: string;
  containerPaddingClass?: string;
};

export default function TextReveal({
  text = "Notre méthode a fait ses preuves, elle est maintenant à votre portée.",
  className = "",
  multiline = false,
  backgroundColor = "bg-white",
  containerPaddingClass = "py-8 md:py-12 lg:py-16",
}: Props) {
  const ref = useRef<HTMLDivElement>(null);
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    const handleScroll = () => {
      if (!ref.current) return;
      const rect = ref.current.getBoundingClientRect();
      const windowHeight = window.innerHeight || document.documentElement.clientHeight;
      const revealStart = rect.top - windowHeight * 0.7;
      const revealEnd = rect.bottom - windowHeight * 0.3;
      let p = 0;
      if (revealEnd <= 0) {
        p = 1;
      } else if (revealStart >= 0) {
        p = 0;
      } else {
        p = 1 - revealEnd / (rect.height + windowHeight * 0.4);
        p = Math.max(0, Math.min(1, p));
      }
      setProgress(p);
    };
    window.addEventListener("scroll", handleScroll, { passive: true });
    handleScroll();
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const letters = text.split("");
  const revealedCount = Math.floor(progress * letters.length);

  if (multiline) {
    const lines = text.split("\n");

    return (
      <section className={`w-full ${backgroundColor} z-30`}>
        <div className={`max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 ${containerPaddingClass}`}>
          <motion.div
            ref={ref}
            initial={{ opacity: 0, y: 40 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, ease: [0.77, 0, 0.18, 1] }}
            viewport={{ once: true, amount: 0.3 }}
